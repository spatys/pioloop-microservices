#!/bin/bash

# Pioloop Microservices - Script de dÃ©marrage
# Ce script dÃ©marre tous les microservices dans l'ordre correct

set -e  # ArrÃªter en cas d'erreur

echo "ðŸš€ DÃ©marrage des microservices Pioloop..."
echo "========================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages colorÃ©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier que Docker est en cours d'exÃ©cution
if ! docker info > /dev/null 2>&1; then
    print_error "Docker n'est pas en cours d'exÃ©cution. Veuillez dÃ©marrer Docker."
    exit 1
fi

print_success "Docker est en cours d'exÃ©cution"

# VÃ©rifier que les rÃ©pertoires existent
if [ ! -d "Email.Microservice" ]; then
    print_error "Le rÃ©pertoire Email.Microservice n'existe pas"
    exit 1
fi

if [ ! -d "Auth.Microservice" ]; then
    print_error "Le rÃ©pertoire Auth.Microservice n'existe pas"
    exit 1
fi

print_success "Tous les rÃ©pertoires microservices sont prÃ©sents"

# ArrÃªter les services existants s'ils sont en cours d'exÃ©cution
print_status "ArrÃªt des services existants..."
cd Email.Microservice && docker-compose down > /dev/null 2>&1 || true
cd ../Auth.Microservice && docker-compose down > /dev/null 2>&1 || true
cd ..

# 1. DÃ©marrer Email Microservice (en premier car Auth en dÃ©pend)
print_status "DÃ©marrage du Email Microservice..."
cd Email.Microservice
docker-compose up -d

# Attendre que Email soit prÃªt
print_status "Attente que Email Microservice soit prÃªt..."
sleep 10

# VÃ©rifier que Email est en cours d'exÃ©cution
if docker-compose ps | grep -q "Up"; then
    print_success "Email Microservice dÃ©marrÃ© avec succÃ¨s"
else
    print_error "Ã‰chec du dÃ©marrage du Email Microservice"
    docker-compose logs
    exit 1
fi

cd ..

# 2. DÃ©marrer Auth Microservice
print_status "DÃ©marrage du Auth Microservice..."
cd Auth.Microservice
docker-compose up -d

# Attendre que Auth soit prÃªt
print_status "Attente que Auth Microservice soit prÃªt..."
sleep 15

# VÃ©rifier que Auth est en cours d'exÃ©cution
if docker-compose ps | grep -q "Up"; then
    print_success "Auth Microservice dÃ©marrÃ© avec succÃ¨s"
else
    print_error "Ã‰chec du dÃ©marrage du Auth Microservice"
    docker-compose logs
    exit 1
fi

cd ..

# Afficher le statut final
echo ""
echo "ðŸŽ‰ Tous les microservices sont dÃ©marrÃ©s !"
echo "========================================"
echo ""
echo "ðŸ“‹ URLs des services :"
echo "  â€¢ Auth API:     http://localhost:5001"
echo "  â€¢ Auth Swagger: http://localhost:5001/swagger"
echo "  â€¢ Email API:    http://localhost:5068"
echo "  â€¢ Email Swagger: http://localhost:5068/swagger"
echo "  â€¢ PostgreSQL:   localhost:5433"
echo ""
echo "ðŸ”§ Commandes utiles :"
echo "  â€¢ Voir les logs Auth:    cd Auth.Microservice && docker-compose logs -f"
echo "  â€¢ Voir les logs Email:   cd Email.Microservice && docker-compose logs -f"
echo "  â€¢ ArrÃªter tous:          ./stop-all.sh"
echo "  â€¢ Statut des services:   ./status.sh"
echo ""
print_success "Les microservices sont prÃªts pour les tests !"
